#BlueJ class context
comment0.target=SilkRoad
comment0.text=\r\n\ SilkRoad\ creates\ a\ square\ spiral-shaped\ route.\r\n\ Each\ square\ represents\ a\ position\ (one\ meter)\ in\ the\ route.\r\n\ This\ class\ manages\ the\ simulation\ of\ robots\ moving\ along\ the\ Silk\ Road,\r\n\ collecting\ tenges\ from\ stores\ and\ calculating\ optimal\ profit\ strategies.\r\n\ \r\n\ @author\ Exael74\ (Github\ User\ for\ Stiven\ Pardo)\r\n\ @version\ 4.0\r\n
comment1.params=length
comment1.target=SilkRoad(int)
comment1.text=\r\n\ Constructor\ for\ SilkRoad\ objects.\r\n\ Creates\ a\ spiral\ route\ with\ the\ specified\ length.\r\n\ \r\n\ @param\ length\ the\ length\ of\ the\ route\ in\ meters\r\n
comment10.params=
comment10.target=void\ makeVisible()
comment10.text=\r\n\ Makes\ the\ entire\ simulator\ visible,\ including\ all\ elements.\r\n\ This\ includes\ the\ road,\ robots,\ stores,\ and\ progress\ bar.\r\n
comment11.params=
comment11.target=void\ makeInvisible()
comment11.text=\r\n\ Makes\ the\ entire\ simulator\ invisible,\ including\ all\ elements.\r\n\ The\ simulation\ continues\ running\ in\ the\ background.\r\n
comment12.params=
comment12.target=boolean\ isVisible()
comment12.text=\r\n\ Returns\ the\ current\ visibility\ state\ of\ the\ simulator.\r\n\ \r\n\ @return\ true\ if\ the\ simulator\ is\ visible,\ false\ otherwise\r\n
comment13.params=position
comment13.target=void\ placeRobot(int)
comment13.text=\r\n\ Places\ a\ robot\ on\ the\ route\ at\ the\ specified\ position.\r\n\ Creates\ a\ normal\ robot\ by\ default.\r\n\ \r\n\ @param\ position\ the\ initial\ position\ of\ the\ robot\ (0\ to\ length-1)\r\n
comment14.params=posToMove\ moveCount
comment14.target=void\ moveRobot(int,\ int)
comment14.text=\r\n\ Moves\ a\ robot\ along\ the\ route.\r\n\ Uses\ polymorphism\ to\ handle\ different\ robot\ and\ store\ behaviors.\r\n\ \r\n\ @param\ posToMove\ the\ current\ position\ of\ the\ robot\ to\ move\r\n\ @param\ moveCount\ the\ number\ of\ positions\ to\ move\ (positive\ \=\ forward,\ negative\ \=\ backward)\r\n
comment15.params=position
comment15.target=void\ removeRobot(int)
comment15.text=\r\n\ Removes\ a\ robot\ from\ the\ route\ at\ the\ specified\ position.\r\n\ If\ the\ removed\ robot\ was\ the\ highest\ profit\ robot,\ updates\ the\ leader.\r\n\ \r\n\ @param\ position\ the\ position\ of\ the\ robot\ to\ remove\r\n
comment16.params=
comment16.target=void\ returnRobots()
comment16.text=\r\n\ Returns\ all\ robots\ to\ their\ initial\ positions.\r\n\ Does\ not\ reset\ their\ profit\ or\ other\ statistics.\r\n
comment17.params=
comment17.target=void\ undoLastMovement()
comment17.text=\r\n\ Undoes\ the\ last\ robot\ movement\ if\ available.\r\n\ Restores\ robot\ positions,\ store\ tenges,\ and\ total\ profit\ to\ their\r\n\ previous\ state\ before\ the\ last\ move.\r\n
comment18.params=
comment18.target=java.lang.String\ getRobotsInfo()
comment18.text=\r\n\ Returns\ information\ about\ all\ robots\ on\ the\ route.\r\n\ Includes\ position,\ color,\ and\ profit\ details\ for\ each\ robot.\r\n\ \r\n\ @return\ a\ formatted\ string\ with\ information\ about\ all\ robots\r\n
comment19.params=position\ tenges
comment19.target=void\ placeStore(int,\ int)
comment19.text=\r\n\ Places\ a\ store\ on\ the\ route\ at\ the\ specified\ position.\r\n\ Creates\ a\ normal\ store\ by\ default.\r\n\ \r\n\ @param\ position\ the\ position\ of\ the\ store\ (0\ to\ length-1)\r\n\ @param\ tenges\ the\ initial\ amount\ of\ tenges\ in\ the\ store\r\n
comment2.params=days
comment2.target=SilkRoad(int[][])
comment2.text=\r\n\ Constructor\ for\ SilkRoad\ objects\ using\ a\ 2D\ array\ of\ days/actions.\r\n\ The\ first\ element\ of\ the\ array\ specifies\ the\ number\ of\ actions\ to\ process.\r\n\ Action\ codes\:\ 1\ \=\ add\ robot,\ 2\ \=\ add\ store.\r\n\ \r\n\ @param\ days\ 2D\ array\ containing\ actions\ to\ perform\:\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ [[numDays],\ [action,\ position],\ [action,\ position,\ tenges],\ ...]\r\n
comment20.params=position
comment20.target=void\ removeStore(int)
comment20.text=\r\n\ Removes\ a\ store\ from\ the\ route\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ position\ the\ position\ of\ the\ store\ to\ remove\r\n
comment21.params=
comment21.target=int\ getLength()
comment21.text=\r\n\ Returns\ the\ length\ of\ the\ route\ in\ meters.\r\n\ \r\n\ @return\ the\ route\ length\r\n
comment22.params=index
comment22.target=int[]\ getPositionForIndex(int)
comment22.text=\r\n\ Returns\ the\ canvas\ coordinates\ for\ a\ given\ position\ index.\r\n\ \r\n\ @param\ index\ the\ position\ index\ in\ the\ route\r\n\ @return\ an\ int\ array\ with\ [x,\ y]\ canvas\ coordinates\r\n
comment23.params=startPos\ endPos
comment23.target=int\ calculateDistance(int,\ int)
comment23.text=\r\n\ Calculates\ the\ shortest\ distance\ between\ two\ positions\ on\ the\ route.\r\n\ Considers\ the\ route\ as\ circular\ and\ returns\ the\ minimum\ distance.\r\n\ \r\n\ @param\ startPos\ the\ starting\ position\r\n\ @param\ endPos\ the\ ending\ position\r\n\ @return\ the\ shortest\ distance\ between\ the\ two\ positions\r\n
comment24.params=
comment24.target=int\ getProfit()
comment24.text=\r\n\ Returns\ the\ accumulated\ profit.\r\n\ \r\n\ @return\ the\ total\ accumulated\ profit\ in\ tenges\r\n
comment25.params=
comment25.target=int\ profit()
comment25.text=\r\n\ Returns\ the\ total\ accumulated\ profit\ with\ percentage\ of\ maximum\ possible.\r\n\ Also\ updates\ the\ last\ action\ message\ with\ detailed\ profit\ information.\r\n\ \r\n\ @return\ the\ total\ accumulated\ profit\ in\ tenges\r\n
comment26.params=
comment26.target=void\ resupplyStores()
comment26.text=\r\n\ Resupplies\ all\ stores\ with\ their\ initial\ tenges\ values.\r\n\ Restores\ all\ stores\ to\ their\ original\ inventory.\r\n
comment27.params=
comment27.target=void\ showSimulationInfo()
comment27.text=\r\n\ Displays\ complete\ simulation\ information\ to\ the\ console.\r\n\ Includes\ details\ about\ the\ route,\ robots,\ stores,\ and\ profit\ statistics.\r\n
comment28.params=
comment28.target=void\ resetSimulator()
comment28.text=\r\n\ Completely\ resets\ the\ simulator.\r\n\ Resets\ profit\ to\ 0,\ resupplies\ all\ stores,\ returns\ robots\ to\ initial\r\n\ positions,\ and\ resets\ robot\ profit\ statistics.\r\n
comment29.params=
comment29.target=void\ finish()
comment29.text=\r\n\ Finishes\ and\ cleans\ up\ the\ simulator.\r\n\ Stops\ timers,\ displays\ final\ summary,\ makes\ everything\ invisible,\r\n\ and\ releases\ resources.\r\n
comment3.params=
comment3.target=void\ startBlinkTimer()
comment3.text=\r\n\ Initializes\ the\ timer\ for\ blinking\ the\ robot\ with\ the\ highest\ profit.\r\n\ The\ timer\ triggers\ a\ blink\ every\ 500ms\ for\ visual\ feedback.\r\n
comment30.params=
comment30.target=int[][]\ stores()
comment30.text=\r\n\ Returns\ a\ 2D\ array\ with\ store\ information,\ sorted\ by\ position.\r\n\ Each\ row\ contains\:\ [position,\ tenges,\ typeNumeric]\r\n\ where\ typeNumeric\ is\:\ 0\=normal,\ 1\=autonomous,\ 2\=fighter\r\n\ \r\n\ @return\ 2D\ array\ with\ store\ data\ [position][tenges][type]\r\n
comment31.params=
comment31.target=int[][]\ robots()
comment31.text=\r\n\ Returns\ a\ 2D\ array\ with\ robot\ information,\ sorted\ by\ position.\r\n\ Each\ row\ contains\:\ [position,\ totalProfit,\ typeNumeric]\r\n\ where\ typeNumeric\ is\:\ 0\=normal,\ 1\=neverback,\ 2\=tender,\ 3\=lazy\r\n\ \r\n\ @return\ 2D\ array\ with\ robot\ data\ [position][profit][type]\r\n
comment32.params=
comment32.target=void\ moveRobots()
comment32.text=\r\n\ Performs\ optimal\ movements\ for\ all\ available\ robots\r\n\ using\ the\ optimal\ assignment\ algorithm.\r\n
comment33.params=
comment33.target=java.util.Map\ calculateOptimalAssignments()
comment33.text=\r\n\ Calculates\ optimal\ robot-to-store\ assignments\ using\ the\ same\r\n\ algorithm\ as\ solve()\ in\ SilkRoadContest.\r\n\ Builds\ a\ profit\ matrix\ and\ applies\ the\ optimal\ assignment\ algorithm.\r\n\ \r\n\ @return\ map\ with\ assignments\ (robot\ index\ ->\ store\ index)\r\n
comment34.params=profitsMatrix
comment34.target=java.util.Map\ optimalAssignment(int[][])
comment34.text=\r\n\ Finds\ the\ optimal\ robot-to-store\ assignment.\r\n\ Uses\ exhaustive\ search\ for\ small\ cases\ (\u226410\ robots\ and\ stores),\r\n\ and\ greedy\ approximation\ for\ larger\ cases.\r\n\ \r\n\ @param\ profitsMatrix\ 2D\ array\ where\ profitsMatrix[i][j]\ is\ the\ profit\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ assigning\ robot\ i\ to\ store\ j\r\n\ @return\ map\ with\ optimal\ assignments\ (robot\ index\ ->\ store\ index)\r\n
comment35.params=profitsMatrix
comment35.target=java.util.Map\ findMaxAssignment(int[][])
comment35.text=\r\n\ Exhaustive\ search\ for\ small\ problem\ sizes.\r\n\ Determines\ whether\ to\ enumerate\ store\ or\ robot\ combinations\ based\ on\ counts.\r\n\ \r\n\ @param\ profitsMatrix\ the\ profit\ matrix\r\n\ @return\ map\ with\ optimal\ assignments\r\n
comment36.params=profitsMatrix\ numRobots\ numStores
comment36.target=java.util.Map\ findMaxAssignmentStores(int[][],\ int,\ int)
comment36.text=\r\n\ Exhaustive\ search\ when\ there\ are\ more\ stores\ than\ robots.\r\n\ Generates\ all\ combinations\ of\ stores\ and\ all\ permutations\ to\ find\ maximum\ profit.\r\n\ \r\n\ @param\ profitsMatrix\ the\ profit\ matrix\r\n\ @param\ numRobots\ number\ of\ robots\r\n\ @param\ numStores\ number\ of\ stores\r\n\ @return\ map\ with\ optimal\ assignments\r\n
comment37.params=profitsMatrix\ numRobots\ numStores
comment37.target=java.util.Map\ findMaxAssignmentRobots(int[][],\ int,\ int)
comment37.text=\r\n\ Exhaustive\ search\ when\ there\ are\ more\ robots\ than\ stores.\r\n\ Generates\ all\ combinations\ of\ robots\ and\ all\ permutations\ of\ stores.\r\n\ \r\n\ @param\ profitsMatrix\ the\ profit\ matrix\r\n\ @param\ numRobots\ number\ of\ robots\r\n\ @param\ numStores\ number\ of\ stores\r\n\ @return\ map\ with\ optimal\ assignments\r\n
comment38.params=elements\ k
comment38.target=java.util.List\ generateCombinations(java.util.List,\ int)
comment38.text=\r\n\ Generates\ all\ combinations\ of\ k\ elements\ from\ the\ given\ list.\r\n\ Uses\ backtracking\ to\ build\ combinations\ recursively.\r\n\ \r\n\ @param\ elements\ the\ list\ of\ elements\ to\ choose\ from\r\n\ @param\ k\ the\ number\ of\ elements\ to\ choose\r\n\ @return\ list\ of\ all\ possible\ k-combinations\r\n
comment39.params=elements\ k\ start\ current\ result
comment39.target=void\ generateCombinationsHelper(java.util.List,\ int,\ int,\ java.util.List,\ java.util.List)
comment39.text=\r\n\ Helper\ method\ for\ generating\ combinations\ using\ backtracking.\r\n\ \r\n\ @param\ elements\ the\ source\ list\ of\ elements\r\n\ @param\ k\ target\ combination\ size\r\n\ @param\ start\ starting\ index\ for\ this\ iteration\r\n\ @param\ current\ current\ combination\ being\ built\r\n\ @param\ result\ accumulator\ for\ all\ combinations\ found\r\n
comment4.params=
comment4.target=void\ run()
comment40.params=elements
comment40.target=java.util.List\ generatePermutations(java.util.List)
comment40.text=\r\n\ Generates\ all\ permutations\ of\ the\ given\ list.\r\n\ Uses\ heap's\ algorithm\ for\ efficient\ permutation\ generation.\r\n\ \r\n\ @param\ elements\ the\ list\ of\ elements\ to\ permute\r\n\ @return\ list\ of\ all\ possible\ permutations\r\n
comment41.params=elements\ start\ result
comment41.target=void\ generatePermutationsHelper(java.util.List,\ int,\ java.util.List)
comment41.text=\r\n\ Helper\ method\ for\ generating\ permutations\ using\ backtracking.\r\n\ Swaps\ elements\ to\ generate\ all\ possible\ orderings.\r\n\ \r\n\ @param\ elements\ the\ list\ being\ permuted\ (modified\ in\ place)\r\n\ @param\ start\ current\ starting\ position\r\n\ @param\ result\ accumulator\ for\ all\ permutations\ found\r\n
comment42.params=profitsMatrix
comment42.target=java.util.Map\ greedyAssignment(int[][])
comment42.text=\r\n\ Greedy\ assignment\ algorithm\ for\ large\ problem\ sizes.\r\n\ Assigns\ robots\ to\ stores\ by\ selecting\ the\ highest\ profit\ pairing\r\n\ at\ each\ step,\ ensuring\ each\ robot\ and\ store\ is\ assigned\ at\ most\ once.\r\n\ \r\n\ @param\ profitsMatrix\ the\ profit\ matrix\r\n\ @return\ map\ with\ greedy\ assignments\r\n
comment43.params=
comment43.target=boolean\ makeOptimalMove()
comment43.text=\r\n\ Legacy\ method\ maintained\ for\ compatibility\ but\ no\ longer\ used.\r\n\ \r\n\ @return\ true\ if\ an\ optimal\ move\ was\ made,\ false\ otherwise\r\n\ @deprecated\ Use\ moveRobots()\ instead\r\n
comment44.params=
comment44.target=java.util.HashMap\ getStoresEmptyCount()
comment44.text=\r\n\ Queries\ the\ number\ of\ times\ each\ store\ has\ been\ emptied.\r\n\ \r\n\ @return\ map\ with\ store\ position\ as\ key\ and\ empty\ count\ as\ value\r\n
comment45.params=
comment45.target=int[][]\ emptiedStores()
comment45.text=\r\n\ Queries\ the\ number\ of\ times\ each\ store\ has\ been\ emptied.\r\n\ Sorted\ by\ position\ from\ lowest\ to\ highest.\r\n\ \r\n\ @return\ 2D\ array\ with\ [position,\ empty_count]\ for\ each\ store\r\n
comment46.params=
comment46.target=int[][]\ profitPerMove()
comment46.text=\r\n\ Queries\ the\ profits\ each\ robot\ has\ achieved\ in\ each\ movement.\r\n\ Sorted\ by\ position\ from\ lowest\ to\ highest.\r\n\ \r\n\ @return\ 2D\ array\ with\ [position,\ profit_move_1,\ profit_move_2,\ ...]\r\n
comment47.params=
comment47.target=boolean\ ok()
comment47.text=\r\n\ Checks\ if\ the\ last\ action\ was\ performed\ successfully.\r\n\ \r\n\ @return\ true\ if\ the\ last\ action\ succeeded,\ false\ otherwise\r\n
comment48.params=
comment48.target=void\ reboot()
comment48.text=\r\n\ Reboots\ the\ simulator\ for\ a\ new\ day.\r\n\ Keeps\ robots\ and\ stores\ but\ returns\ robots\ to\ initial\ positions\r\n\ and\ resets\ the\ profit\ counter.\r\n
comment49.params=position\ tenges\ type
comment49.target=void\ placeStore(int,\ int,\ java.lang.String)
comment49.text=\r\n\ Places\ a\ store\ on\ the\ route\ with\ a\ specific\ type.\r\n\ Uses\ polymorphism\ to\ create\ the\ appropriate\ store\ subclass.\r\n\ \r\n\ @param\ position\ the\ position\ of\ the\ store\ (ignored\ for\ autonomous\ type)\r\n\ @param\ tenges\ the\ initial\ amount\ of\ tenges\ in\ the\ store\r\n\ @param\ type\ the\ store\ type\:\ "normal",\ "autonomous",\ "fighter"\r\n
comment5.params=
comment5.target=void\ updateHighestProfitRobot()
comment5.text=\r\n\ Updates\ the\ robot\ with\ the\ highest\ profit\ and\ manages\ blinking\ behavior.\r\n\ Stops\ blinking\ for\ the\ previous\ leader\ and\ starts\ blinking\ for\ the\ new\ one.\r\n
comment50.params=position\ type
comment50.target=void\ placeRobot(int,\ java.lang.String)
comment50.text=\r\n\ Places\ a\ robot\ on\ the\ route\ with\ a\ specific\ type.\r\n\ Uses\ polymorphism\ to\ create\ the\ appropriate\ robot\ subclass.\r\n\ \r\n\ @param\ position\ the\ initial\ position\ of\ the\ robot\r\n\ @param\ type\ the\ robot\ type\:\ "normal",\ "neverback",\ "tender",\ "lazy"\r\n
comment6.params=
comment6.target=void\ initializeProgressBar()
comment6.text=\r\n\ Initializes\ the\ progress\ bar\ visual\ components.\r\n\ Creates\ background\ (black)\ and\ fill\ (green)\ rectangles\ to\ display\r\n\ the\ simulation\ progress\ relative\ to\ maximum\ possible\ profit.\r\n
comment7.params=
comment7.target=int\ calculateMaximumPossibleProfit()
comment7.text=\r\n\ Calculates\ the\ maximum\ possible\ profit\ with\ all\ existing\ stores.\r\n\ Includes\ empty\ stores\ using\ their\ initial\ tenges\ values.\r\n\ For\ each\ store,\ finds\ the\ robot\ that\ can\ achieve\ the\ maximum\ benefit.\r\n\ \r\n\ @return\ the\ maximum\ possible\ profit\ in\ tenges\r\n
comment8.params=
comment8.target=void\ updateProgressBar()
comment8.text=\r\n\ Updates\ the\ progress\ bar\ fill\ width\ based\ on\ current\ profit\ ratio.\r\n\ The\ bar\ fills\ proportionally\ to\ the\ current\ profit\ divided\ by\r\n\ the\ maximum\ possible\ profit.\r\n
comment9.params=
comment9.target=void\ createSpiralRoad()
comment9.text=\r\n\ Creates\ the\ route\ in\ a\ square\ spiral\ shape.\r\n\ The\ spiral\ expands\ outward\ from\ the\ center\ point,\ with\ each\ position\r\n\ represented\ by\ a\ yellow\ square\ on\ the\ canvas.\r\n
numComments=51
